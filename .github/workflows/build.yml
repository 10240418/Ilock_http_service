name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23.0'
  DOCKER_IMAGE: stonesea/ilock-http-service
  DOCKER_REGISTRY: docker.imgdb.de

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Verify Go modules
      run: |
        go mod verify
        go mod tidy

    - name: Build
      run: |
        export GOPROXY=https://goproxy.cn,direct
        go build -v ./...

    - name: Test
      run: go test -v ./...

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    # 创建 .env 文件
    - name: Create .env file
      run: |
        cat > .env << EOF
        # 数据库配置
        DB_HOST=db
        DB_USER=root
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_NAME=ilock_db
        DB_PORT=3306
        DB_TIMEZONE=Asia/Shanghai
        DB_MIGRATION_MODE=alter

        # MySQL配置
        MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASSWORD }}
        MYSQL_DATABASE=ilock_db

        # 服务器配置
        SERVER_PORT=20033
        TZ=Asia/Shanghai

        # JWT配置
        JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}

        # Redis配置
        REDIS_HOST=redis
        REDIS_PORT=6379
        REDIS_PASSWORD=
        REDIS_DB=0

        # 阿里云配置
        ALIYUN_ACCESS_KEY_ID=${{ secrets.ALIYUN_ACCESS_KEY_ID }}
        ALIYUN_ACCESS_KEY_SECRET=${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
        ALIYUN_RTC_APP_ID=${{ secrets.ALIYUN_RTC_APP_ID }}
        ALIYUN_RTC_REGION=cn-hangzhou
        EOF

    - name: Copy deployment files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT }}
        source: "docker-compose.yml,.env"
        target: "/root/ilock"
        strip_components: 0

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          cd /root/ilock
          
          # 确保目录存在
          mkdir -p /root/ilock/logs
          
          # 确保 .env 文件存在并且有正确的权限
          chmod 600 .env
          
          # 导出环境变量
          export $(cat .env | grep -v '^#' | xargs)
          
          # 配置 Docker 镜像加速器
          echo '{
            "registry-mirrors": [
              "https://docker.imgdb.de"
            ]
          }' | sudo tee /etc/docker/daemon.json
          
          # 重启 Docker 服务
          sudo systemctl daemon-reload
          sudo systemctl restart docker
          
          # 修改镜像地址为加速源地址
          sed -i "s|image: stonesea/ilock-http-service:latest|image: docker.imgdb.de/stonesea/ilock-http-service:latest|g" docker-compose.yml
          sed -i "s|image: mysql:8.0|image: docker.imgdb.de/mysql:8.0|g" docker-compose.yml
          sed -i "s|image: redis:7.0-alpine|image: docker.imgdb.de/redis:7.0-alpine|g" docker-compose.yml
          
          # 停止并删除所有相关容器
          echo "停止并清理现有服务..."
          docker-compose down --volumes --remove-orphans || true
          
          # 删除旧的镜像
          echo "清理旧镜像..."
          docker rmi docker.imgdb.de/stonesea/ilock-http-service:latest || true
          docker rmi stonesea/ilock-http-service:latest || true
          
          # 验证环境变量
          echo "验证环境变量..."
          if [ -z "$MYSQL_ROOT_PASSWORD" ]; then
            echo "错误：MYSQL_ROOT_PASSWORD 未设置"
            exit 1
          fi
          
          # 拉取镜像（带重试机制）
          echo "开始拉取镜像..."
          max_retries=5
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            if docker-compose pull; then
              echo "镜像拉取成功"
              break
            else
              retry_count=$((retry_count+1))
              if [ $retry_count -eq $max_retries ]; then
                echo "镜像拉取失败，已达到最大重试次数"
                exit 1
              fi
              echo "镜像拉取失败，等待 10 秒后进行第 $retry_count 次重试..."
              sleep 10
            fi
          done
          
          # 启动服务
          echo "启动服务..."
          docker-compose --env-file .env up -d
          
          # 等待并检查服务启动状态
          echo "等待服务启动并检查状态..."
          
          # 检查 MySQL 就绪状态
          echo "正在等待 MySQL 就绪..."
          for i in {1..30}; do
            if docker-compose ps db | grep -q "Up"; then
              if docker exec ilock_mysql mysqladmin ping -h localhost -u root -p"${MYSQL_ROOT_PASSWORD}" --silent; then
                echo "MySQL 已就绪 (尝试 $i/30)"
                break
              fi
            fi
            if [ $i -eq 30 ]; then
              echo "MySQL 启动超时"
              docker-compose logs db
              exit 1
            fi
            echo "MySQL 启动中... (尝试 $i/30)"
            sleep 2
          done
          
          # 检查 Redis 就绪状态
          echo "正在等待 Redis 就绪..."
          for i in {1..30}; do
            if docker-compose ps redis | grep -q "Up"; then
              if docker exec ilock_redis redis-cli ping | grep -q "PONG"; then
                echo "Redis 已就绪 (尝试 $i/30)"
                break
              fi
            fi
            if [ $i -eq 30 ]; then
              echo "Redis 启动超时"
              docker-compose logs redis
              exit 1
            fi
            echo "Redis 启动中... (尝试 $i/30)"
            sleep 2
          done
          
          # 检查应用服务健康状态
          echo "正在等待应用服务就绪..."
          for i in {1..60}; do
            if docker-compose ps app | grep -q "Up"; then
              if curl -s http://localhost:20033/api/ping > /dev/null 2>&1; then
                echo "应用服务启动成功！(尝试 $i/60)"
                echo "所有服务状态："
                docker-compose ps
                
                # 恢复原始配置
                sed -i "s|image: docker.imgdb.de/stonesea/ilock-http-service:latest|image: stonesea/ilock-http-service:latest|g" docker-compose.yml
                sed -i "s|image: docker.imgdb.de/mysql:8.0|image: mysql:8.0|g" docker-compose.yml
                sed -i "s|image: docker.imgdb.de/redis:7.0-alpine|image: redis:7.0-alpine|g" docker-compose.yml
                
                exit 0
              fi
            fi
            
            if [ $i -eq 60 ]; then
              echo "应用服务启动超时"
              echo "应用服务日志："
              docker-compose logs app
              break
            fi
            
            if [ $((i % 5)) -eq 0 ]; then
              echo "应用服务启动中... (尝试 $i/60)"
              echo "最新日志："
              docker-compose logs --tail=10 app
            fi
            sleep 2
          done
          
          # 恢复原始配置（即使失败也要恢复）
          sed -i "s|image: docker.imgdb.de/stonesea/ilock-http-service:latest|image: stonesea/ilock-http-service:latest|g" docker-compose.yml
          sed -i "s|image: docker.imgdb.de/mysql:8.0|image: mysql:8.0|g" docker-compose.yml
          sed -i "s|image: docker.imgdb.de/redis:7.0-alpine|image: redis:7.0-alpine|g" docker-compose.yml
          
          echo "服务启动失败"
          echo "完整服务状态："
          docker-compose ps
          echo "所有服务日志："
          docker-compose logs
          exit 1 